package com.jivesoftware.robot.intellij.plugin.lexer;

/*
 * Copyright 2010 - 2013 Ed Venaglia
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

import com.intellij.lang.Language;
import com.intellij.psi.tree.IElementType;
import com.jivesoftware.robot.intellij.plugin.lang.RobotLanguage;
import org.jetbrains.annotations.NonNls;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

/**
 * User: ed
 * Date: Jul 9, 2010
 * Time: 2:40:27 PM
 *
 * Class to represent and statically enumerate all supported lexer token types
 * generated by the soy flex lexer.
 */
public final class RobotToken extends IElementType {

  private enum TYPE {SETTINGS_TABLE, VARIABLES_TABLE, TEST_CASES_TABLE, META_INFO, ROBOT_KEYWORD, VARIABLE, WHITESPACE, COMMENT}

  public static final RobotToken SETTINGS_TABLE_TOKEN = new RobotToken(TYPE.SETTINGS_TABLE);
  public static final RobotToken VARIABLES_TABLE_TOKEN = new RobotToken(TYPE.VARIABLES_TABLE);
  public static final RobotToken TEST_CASES_TABLE_TOKEN = new RobotToken(TYPE.TEST_CASES_TABLE);
  public static final RobotToken ROBOT_KEYWORD_TOKEN = new RobotToken(TYPE.ROBOT_KEYWORD);
  public static final RobotToken COMMENT_TOKEN = new RobotToken(TYPE.COMMENT);
  public static final RobotToken VARIABLE_TOKEN = new RobotToken(TYPE.VARIABLE);

  private final TYPE type;
  private final String text;
  private final int line;
  private final int col;

  private RobotToken(@NotNull @NonNls TYPE type) {
    this(type, null, -1, -1);
  }

  private RobotToken(@NotNull @NonNls TYPE type,
                     @Nullable String text) {
    this(type, text, -1, -1);
  }

  private RobotToken(@NotNull @NonNls TYPE type,
                     @Nullable String text,
                     int line,
                     int col) {
    this(type, text, line, col, RobotLanguage.INSTANCE);
  }

  private RobotToken(@NotNull @NonNls TYPE type,
                     @Nullable String text,
                     int line,
                     int col,
                     Language l) {
    super(type.toString(), l, true);
    this.type = type;
    this.text = text;
    this.line = line;
    this.col = col;
  }

  public int getLine() {
    return line;
  }

  public int getCol() {
    return col;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RobotToken robotToken = (RobotToken) o;
    return type == robotToken.type;
  }

  @Override
  public int hashCode() {
    return type.hashCode() ^ hashCodeNullable(text);
  }

  private static int hashCodeNullable(@Nullable Object o) {
    return o == null ? 0 : o.hashCode();
  }

  @Override
  public String toString() {
    return type + "." + text;
  }

}
