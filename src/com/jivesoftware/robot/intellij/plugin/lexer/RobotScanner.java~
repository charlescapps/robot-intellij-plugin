/* The following code was generated by JFlex 1.4.3 on 3/31/14 12:53 PM */

/*
   Copyright 2014 Charles Capps

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

package com.jivesoftware.robot.intellij.plugin.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.jivesoftware.robot.intellij.plugin.parser.RobotTypes;

import static com.jivesoftware.robot.intellij.plugin.parser.RobotTypes.*;

//@SuppressWarnings({ "ALL" })


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 3/31/14 12:53 PM from the specification file
 * <tt>/home/charles/Jive/hackday/robot-intellij-plugin/src/com/jivesoftware/robot/intellij/plugin/lexer/robot.flex</tt>
 */
class RobotScanner implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;
  private static final String ZZ_NL = System.getProperty("line.separator");

  /** lexical states */
  public static final int KEYWORDS = 4;
  public static final int YYINITIAL = 0;
  public static final int TEST_CASES = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\2\2\0\1\1\22\0\1\5\2\0\1\3\1\6"+
    "\5\0\1\36\3\0\1\45\1\0\1\44\11\13\3\0\1\11\3\0"+
    "\2\12\1\37\1\30\1\12\1\15\4\12\1\40\7\12\1\12\1\22"+
    "\6\12\1\26\1\0\1\27\1\0\1\14\1\0\1\23\1\12\1\20"+
    "\1\43\1\21\1\15\1\24\1\12\1\35\1\12\1\40\1\12\1\32"+
    "\1\33\1\16\2\12\1\17\1\25\1\34\1\31\1\12\1\42\1\12"+
    "\1\41\1\12\1\7\1\0\1\10\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\3\1\4\1\5\1\1\1\6"+
    "\1\7\1\6\2\1\1\7\2\10\1\11\2\10\2\12"+
    "\1\13\1\7\2\12\1\7\1\0\1\1\1\0\1\1"+
    "\1\6\3\1\2\0\3\14\1\1\1\0\1\10\1\0"+
    "\3\10\2\0\2\15\1\0\1\12\1\0\3\12\2\0"+
    "\1\15\1\12\1\1\1\7\1\6\1\16\2\1\10\14"+
    "\1\10\1\16\2\10\6\15\1\12\1\7\1\16\1\12"+
    "\2\15\1\17\1\6\2\1\6\14\1\17\2\10\4\15"+
    "\1\17\1\12\1\20\1\6\2\1\4\14\1\20\2\10"+
    "\2\15\1\21\1\12\1\0\1\6\1\22\1\1\5\14"+
    "\1\22\1\10\2\15\1\12\1\6\1\1\5\14\1\10"+
    "\2\15\1\12\1\6\1\1\4\14\1\10\2\15\1\12"+
    "\1\23\1\1\3\14\1\24\1\10\1\15\1\24\1\12"+
    "\1\1\1\14\1\24\1\25\3\24\1\10\3\24\1\12"+
    "\1\1\1\25\2\24\3\25\1\10\1\24\1\12\1\1"+
    "\2\25\1\10\1\12\1\1\1\10\1\12\1\1\1\10"+
    "\1\12\3\26";

  private static int [] zzUnpackAction() {
    int [] result = new int[207];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\46\0\114\0\162\0\230\0\276\0\344\0\u010a"+
    "\0\u010a\0\u0130\0\u0156\0\u017c\0\u01a2\0\u01c8\0\u01ee\0\u0214"+
    "\0\u023a\0\u0260\0\u0286\0\u02ac\0\u02d2\0\u02f8\0\u031e\0\u0344"+
    "\0\u036a\0\u0390\0\u03b6\0\u03dc\0\u0402\0\u0428\0\u044e\0\u0474"+
    "\0\u049a\0\u04c0\0\u04e6\0\u050c\0\u0532\0\u0558\0\u057e\0\u05a4"+
    "\0\u05ca\0\u0214\0\u05f0\0\u0616\0\u063c\0\u0662\0\u0688\0\u06ae"+
    "\0\u06d4\0\u06fa\0\u0720\0\u0746\0\u076c\0\u0792\0\u07b8\0\u07de"+
    "\0\u0804\0\u082a\0\u0850\0\u0876\0\u089c\0\u03dc\0\u08c2\0\u0474"+
    "\0\u08e8\0\162\0\u090e\0\u0934\0\u095a\0\u0980\0\u09a6\0\u09cc"+
    "\0\u09f2\0\u0a18\0\u0a3e\0\u0a64\0\u0a8a\0\u023a\0\u0ab0\0\u0ad6"+
    "\0\u0afc\0\u0b22\0\u0b48\0\u0b6e\0\u0b94\0\u0bba\0\u0be0\0\u07de"+
    "\0\u02f8\0\u0c06\0\u0c2c\0\u0c52\0\u0c78\0\u0c9e\0\u0cc4\0\u0cea"+
    "\0\u0d10\0\u0d36\0\u0d5c\0\u0d82\0\u0da8\0\u0dce\0\u0df4\0\u0e1a"+
    "\0\u0e40\0\u0e66\0\u0e8c\0\u0eb2\0\u0ed8\0\u0efe\0\u0f24\0\162"+
    "\0\u0f4a\0\u0f70\0\u0f96\0\u0fbc\0\u0fe2\0\u1008\0\u102e\0\u023a"+
    "\0\u1054\0\u107a\0\u10a0\0\u10c6\0\u02f8\0\u10ec\0\u1112\0\u1138"+
    "\0\162\0\u115e\0\u1184\0\u11aa\0\u11d0\0\u11f6\0\u121c\0\u023a"+
    "\0\u1242\0\u1268\0\u128e\0\u12b4\0\u12da\0\u1300\0\u1326\0\u134c"+
    "\0\u1372\0\u1398\0\u13be\0\u13e4\0\u140a\0\u1430\0\u1456\0\u147c"+
    "\0\u14a2\0\u14c8\0\u14ee\0\u1514\0\u153a\0\u1560\0\u1586\0\u15ac"+
    "\0\u15d2\0\u0156\0\u15f8\0\u161e\0\u1644\0\u166a\0\u1690\0\u16b6"+
    "\0\u16dc\0\u1702\0\u1728\0\u174e\0\u1774\0\u179a\0\u17c0\0\u17e6"+
    "\0\u180c\0\u1832\0\u1858\0\u187e\0\u18a4\0\u18ca\0\u18f0\0\u1916"+
    "\0\u193c\0\u1962\0\u1988\0\u19ae\0\u19d4\0\u19fa\0\u1a20\0\u1a46"+
    "\0\u1a6c\0\u1a92\0\u1ab8\0\u1ade\0\u1b04\0\u1b2a\0\u1b50\0\u1b76"+
    "\0\u1b9c\0\u1bc2\0\u1be8\0\u1c0e\0\162\0\u023a\0\u02f8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[207];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\3\4"+
    "\1\13\1\14\1\4\1\15\10\13\1\16\1\4\6\13"+
    "\1\17\5\13\1\20\1\4\1\21\1\5\1\6\1\7"+
    "\1\10\1\11\1\22\3\21\1\23\2\21\11\23\1\24"+
    "\1\21\6\23\1\25\5\23\2\21\1\26\1\5\1\6"+
    "\1\7\1\10\1\11\1\27\3\26\1\30\1\31\1\26"+
    "\11\30\1\32\1\26\6\30\1\33\5\30\1\34\1\26"+
    "\1\4\4\0\1\35\40\4\2\0\1\6\111\0\1\7"+
    "\2\0\43\7\4\0\2\10\40\0\1\4\4\0\1\35"+
    "\1\4\1\36\37\4\4\0\1\37\4\4\2\13\1\4"+
    "\11\13\2\4\6\13\1\4\6\13\2\4\4\0\1\35"+
    "\5\4\1\14\30\4\1\14\1\40\1\4\4\0\1\37"+
    "\4\4\2\13\1\4\1\13\1\41\7\13\2\4\6\13"+
    "\1\4\6\13\2\4\4\0\1\35\4\4\1\42\1\4"+
    "\6\42\1\43\3\42\2\4\1\44\3\42\1\43\1\42"+
    "\1\4\4\42\1\44\3\4\3\0\1\45\1\46\4\4"+
    "\1\47\1\4\6\47\1\50\3\47\2\4\4\47\1\50"+
    "\1\47\1\17\1\47\1\51\3\47\3\4\4\0\1\35"+
    "\5\4\1\52\30\4\1\52\1\40\1\21\4\0\1\53"+
    "\41\21\4\0\1\53\1\21\1\54\37\21\4\0\1\55"+
    "\4\21\2\23\1\21\11\23\2\21\6\23\1\21\6\23"+
    "\2\21\4\0\1\53\4\21\1\56\1\21\6\56\1\57"+
    "\3\56\2\21\1\60\3\56\1\57\1\56\1\21\4\56"+
    "\1\60\3\21\3\0\1\61\1\62\4\21\1\63\1\21"+
    "\12\63\2\21\6\63\1\25\1\63\1\64\3\63\2\21"+
    "\1\26\4\0\1\65\41\26\4\0\1\65\1\26\1\66"+
    "\37\26\4\0\1\67\4\26\2\30\1\26\11\30\2\26"+
    "\6\30\1\26\6\30\2\26\4\0\1\65\5\26\1\31"+
    "\30\26\1\31\1\70\1\26\4\0\1\65\4\26\1\71"+
    "\1\26\12\71\2\26\1\72\5\71\1\26\4\71\1\72"+
    "\3\26\3\0\1\73\1\74\4\26\1\75\1\26\12\75"+
    "\2\26\6\75\1\33\5\75\3\26\4\0\1\65\5\26"+
    "\1\76\30\26\1\76\1\70\1\4\5\0\41\4\4\0"+
    "\1\35\4\4\1\77\1\4\12\77\2\4\6\77\1\4"+
    "\5\77\3\4\5\0\4\4\1\13\2\4\11\13\2\4"+
    "\6\13\1\4\5\13\3\4\4\0\1\35\5\4\1\100"+
    "\30\4\1\100\2\4\4\0\1\37\4\4\2\13\1\4"+
    "\2\13\1\101\6\13\2\4\6\13\1\4\6\13\2\4"+
    "\4\0\1\35\4\4\14\42\1\4\1\102\6\42\1\4"+
    "\6\42\2\4\4\0\1\35\4\4\11\42\1\103\2\42"+
    "\1\4\1\102\6\42\1\4\6\42\2\4\4\0\1\35"+
    "\4\4\4\42\1\104\7\42\1\4\1\102\6\42\1\4"+
    "\6\42\1\4\4\0\2\45\4\0\1\105\1\0\6\105"+
    "\1\106\3\105\2\0\4\105\1\106\1\105\1\0\1\105"+
    "\1\107\3\105\2\0\1\4\3\0\2\45\4\4\1\47"+
    "\1\4\6\47\1\50\3\47\2\4\4\47\1\50\1\47"+
    "\1\4\1\47\1\51\3\47\3\4\3\0\1\110\1\111"+
    "\4\4\14\47\2\4\6\47\1\112\6\47\2\4\3\0"+
    "\1\110\1\111\4\4\7\47\1\113\4\47\2\4\6\47"+
    "\1\112\6\47\2\4\3\0\1\110\1\111\4\4\7\47"+
    "\1\114\4\47\2\4\6\47\1\112\6\47\1\4\1\21"+
    "\5\0\41\21\4\0\1\53\4\21\1\115\1\21\12\115"+
    "\2\21\6\115\1\21\5\115\3\21\5\0\4\21\1\23"+
    "\2\21\11\23\2\21\6\23\1\21\5\23\3\21\4\0"+
    "\1\53\4\21\14\56\1\21\1\116\6\56\1\21\6\56"+
    "\2\21\4\0\1\53\4\21\11\56\1\117\2\56\1\21"+
    "\1\116\6\56\1\21\6\56\2\21\4\0\1\53\4\21"+
    "\4\56\1\120\7\56\1\21\1\116\6\56\1\21\6\56"+
    "\1\21\4\0\2\61\4\0\1\121\1\0\12\121\2\0"+
    "\6\121\1\0\1\121\1\122\3\121\2\0\1\21\3\0"+
    "\2\61\4\21\1\63\1\21\12\63\2\21\6\63\1\21"+
    "\1\63\1\64\3\63\3\21\3\0\1\123\1\124\4\21"+
    "\14\63\2\21\6\63\1\125\6\63\2\21\3\0\1\123"+
    "\1\124\4\21\7\63\1\126\4\63\2\21\6\63\1\125"+
    "\6\63\1\21\1\26\5\0\41\26\4\0\1\65\4\26"+
    "\1\127\1\26\12\127\2\26\6\127\1\26\5\127\3\26"+
    "\5\0\4\26\1\30\2\26\11\30\2\26\6\30\1\26"+
    "\5\30\3\26\4\0\1\65\5\26\1\130\30\26\1\130"+
    "\2\26\4\0\1\65\4\26\14\71\1\26\1\131\6\71"+
    "\1\26\6\71\2\26\4\0\1\65\4\26\4\71\1\132"+
    "\7\71\1\26\1\131\6\71\1\26\6\71\1\26\4\0"+
    "\2\73\4\0\1\121\1\0\12\121\2\0\6\121\1\0"+
    "\5\121\2\0\1\26\3\0\2\73\4\26\1\75\1\26"+
    "\12\75\2\26\6\75\1\26\5\75\3\26\3\0\1\123"+
    "\1\133\4\26\14\75\2\26\6\75\1\134\6\75\1\26"+
    "\1\4\4\0\1\35\2\4\1\135\1\4\14\77\2\4"+
    "\6\77\1\4\6\77\2\4\4\0\1\37\4\4\2\13"+
    "\1\4\3\13\1\136\5\13\2\4\6\13\1\4\6\13"+
    "\2\4\4\0\1\35\4\4\12\42\1\137\1\42\1\4"+
    "\1\102\6\42\1\4\6\42\2\4\4\0\1\35\4\4"+
    "\6\42\1\140\5\42\1\4\1\102\6\42\1\4\6\42"+
    "\1\4\4\0\1\110\1\141\4\0\14\105\2\0\6\105"+
    "\1\142\6\105\5\0\1\110\1\141\4\0\7\105\1\143"+
    "\4\105\2\0\6\105\1\142\6\105\5\0\1\110\1\141"+
    "\4\0\7\105\1\144\4\105\2\0\6\105\1\142\6\105"+
    "\5\0\2\110\30\0\1\142\7\0\1\4\3\0\2\110"+
    "\4\4\1\47\1\4\12\47\2\4\6\47\1\112\5\47"+
    "\3\4\4\0\1\35\30\4\1\112\10\4\3\0\1\110"+
    "\1\111\4\4\13\47\1\145\2\4\6\47\1\112\6\47"+
    "\2\4\3\0\1\110\1\111\4\4\14\47\2\4\6\47"+
    "\1\112\2\47\1\146\3\47\1\4\1\21\4\0\1\53"+
    "\2\21\1\147\1\21\14\115\2\21\6\115\1\21\6\115"+
    "\2\21\4\0\1\53\4\21\12\56\1\150\1\56\1\21"+
    "\1\116\6\56\1\21\6\56\2\21\4\0\1\53\4\21"+
    "\6\56\1\151\5\56\1\21\1\116\6\56\1\21\6\56"+
    "\1\21\4\0\1\123\1\152\4\0\14\121\2\0\6\121"+
    "\1\153\6\121\5\0\1\123\1\152\4\0\7\121\1\154"+
    "\4\121\2\0\6\121\1\153\6\121\5\0\2\123\30\0"+
    "\1\153\7\0\1\21\3\0\2\123\4\21\1\63\1\21"+
    "\12\63\2\21\6\63\1\125\5\63\3\21\4\0\1\53"+
    "\30\21\1\125\10\21\3\0\1\123\1\124\4\21\14\63"+
    "\2\21\6\63\1\125\2\63\1\155\3\63\1\21\1\26"+
    "\4\0\1\65\2\26\1\156\1\26\14\127\2\26\6\127"+
    "\1\26\6\127\2\26\4\0\1\65\4\26\6\71\1\157"+
    "\5\71\1\26\1\131\6\71\1\26\6\71\2\26\3\0"+
    "\2\123\4\26\1\75\1\26\12\75\2\26\6\75\1\134"+
    "\5\75\3\26\4\0\1\65\30\26\1\134\7\26\1\4"+
    "\4\0\1\35\3\4\1\160\35\4\4\0\1\37\4\4"+
    "\2\13\1\4\4\13\1\161\4\13\2\4\6\13\1\4"+
    "\6\13\2\4\4\0\1\35\4\4\13\42\1\162\1\4"+
    "\1\102\6\42\1\4\6\42\2\4\4\0\1\35\4\4"+
    "\14\42\1\4\1\102\1\42\1\163\4\42\1\4\6\42"+
    "\1\4\4\0\2\110\4\0\1\105\1\0\12\105\2\0"+
    "\6\105\1\142\5\105\40\0\1\142\13\0\1\110\1\141"+
    "\4\0\13\105\1\164\2\0\6\105\1\142\6\105\5\0"+
    "\1\110\1\141\4\0\14\105\2\0\6\105\1\142\2\105"+
    "\1\165\3\105\1\0\1\4\3\0\1\110\1\111\4\4"+
    "\14\47\2\4\4\47\1\166\1\47\1\112\6\47\2\4"+
    "\3\0\1\110\1\111\4\4\14\47\2\4\6\47\1\112"+
    "\3\47\1\167\2\47\1\4\1\21\4\0\1\53\3\21"+
    "\1\170\35\21\4\0\1\53\4\21\13\56\1\171\1\21"+
    "\1\116\6\56\1\21\6\56\2\21\4\0\1\53\4\21"+
    "\14\56\1\21\1\116\1\56\1\172\4\56\1\21\6\56"+
    "\1\21\4\0\2\123\4\0\1\121\1\0\12\121\2\0"+
    "\6\121\1\153\5\121\40\0\1\153\13\0\1\123\1\152"+
    "\4\0\14\121\2\0\6\121\1\153\2\121\1\173\3\121"+
    "\1\0\1\21\3\0\1\123\1\124\4\21\14\63\2\21"+
    "\6\63\1\125\3\63\1\174\2\63\1\21\1\26\4\0"+
    "\1\65\3\26\1\175\35\26\4\0\1\65\4\26\14\71"+
    "\1\26\1\131\1\71\1\176\4\71\1\26\6\71\1\26"+
    "\1\4\4\0\1\177\4\4\2\13\1\4\5\13\1\200"+
    "\3\13\2\4\4\13\1\200\1\13\1\4\6\13\2\4"+
    "\4\0\1\35\4\4\14\42\1\4\1\201\6\42\1\4"+
    "\6\42\2\4\4\0\1\35\4\4\14\42\1\4\1\102"+
    "\2\42\1\202\3\42\1\4\6\42\1\4\4\0\1\110"+
    "\1\141\4\0\14\105\2\0\4\105\1\203\1\105\1\142"+
    "\6\105\5\0\1\110\1\141\4\0\14\105\2\0\6\105"+
    "\1\142\3\105\1\204\2\105\1\0\1\4\3\0\1\110"+
    "\1\205\4\4\6\47\1\206\5\47\2\4\6\47\1\112"+
    "\1\206\5\47\2\4\3\0\1\110\1\111\4\4\4\47"+
    "\1\207\7\47\2\4\6\47\1\112\6\47\1\4\1\21"+
    "\4\0\1\53\4\21\14\56\1\21\1\210\6\56\1\21"+
    "\6\56\2\21\4\0\1\53\4\21\14\56\1\21\1\116"+
    "\2\56\1\211\3\56\1\21\6\56\1\21\4\0\1\123"+
    "\1\152\4\0\14\121\2\0\6\121\1\153\3\121\1\212"+
    "\2\121\1\0\1\21\3\0\1\123\1\124\4\21\4\63"+
    "\1\213\7\63\2\21\6\63\1\125\6\63\1\21\1\26"+
    "\4\0\1\65\4\26\14\71\1\26\1\131\2\71\1\214"+
    "\3\71\1\26\6\71\1\26\1\4\5\0\4\4\1\13"+
    "\2\4\5\13\1\200\3\13\2\4\4\13\1\200\1\13"+
    "\1\4\5\13\3\4\4\0\1\37\4\4\2\13\1\4"+
    "\6\13\1\215\2\13\2\4\6\13\1\4\6\13\2\4"+
    "\4\0\1\35\4\4\7\42\1\216\4\42\1\4\1\102"+
    "\6\42\1\4\6\42\1\4\4\0\1\110\1\217\4\0"+
    "\6\105\1\220\5\105\2\0\6\105\1\142\1\220\5\105"+
    "\5\0\1\110\1\141\4\0\4\105\1\221\7\105\2\0"+
    "\6\105\1\142\6\105\1\0\1\4\3\0\2\110\4\4"+
    "\1\47\1\4\4\47\1\206\5\47\2\4\6\47\1\112"+
    "\1\206\4\47\3\4\3\0\1\110\1\111\4\4\11\47"+
    "\1\222\2\47\2\4\6\47\1\112\6\47\2\4\3\0"+
    "\1\110\1\111\4\4\5\47\1\223\6\47\2\4\6\47"+
    "\1\112\6\47\1\4\1\21\4\0\1\53\4\21\7\56"+
    "\1\224\4\56\1\21\1\116\6\56\1\21\6\56\1\21"+
    "\4\0\1\123\1\152\4\0\4\121\1\225\7\121\2\0"+
    "\6\121\1\153\6\121\1\0\1\21\3\0\1\123\1\124"+
    "\4\21\5\63\1\226\6\63\2\21\6\63\1\125\6\63"+
    "\1\21\1\26\4\0\1\65\4\26\7\71\1\227\4\71"+
    "\1\26\1\131\6\71\1\26\6\71\1\26\1\4\4\0"+
    "\1\37\4\4\2\13\1\4\7\13\1\230\1\13\2\4"+
    "\6\13\1\4\6\13\2\4\4\0\1\35\4\4\14\42"+
    "\1\4\1\102\3\42\1\231\2\42\1\4\6\42\1\4"+
    "\4\0\2\110\4\0\1\105\1\0\4\105\1\220\5\105"+
    "\2\0\6\105\1\142\1\220\4\105\6\0\1\110\1\141"+
    "\4\0\11\105\1\232\2\105\2\0\6\105\1\142\6\105"+
    "\5\0\1\110\1\141\4\0\5\105\1\233\6\105\2\0"+
    "\6\105\1\142\6\105\1\0\1\4\3\0\1\110\1\111"+
    "\4\4\13\47\1\234\2\4\6\47\1\112\6\47\2\4"+
    "\3\0\1\110\1\111\4\4\14\47\2\4\6\47\1\112"+
    "\4\47\1\235\1\47\1\4\1\21\4\0\1\53\4\21"+
    "\14\56\1\21\1\116\3\56\1\236\2\56\1\21\6\56"+
    "\1\21\4\0\1\123\1\152\4\0\5\121\1\237\6\121"+
    "\2\0\6\121\1\153\6\121\1\0\1\21\3\0\1\123"+
    "\1\124\4\21\14\63\2\21\6\63\1\125\4\63\1\240"+
    "\1\63\1\21\1\26\4\0\1\65\4\26\14\71\1\26"+
    "\1\131\3\71\1\241\2\71\1\26\6\71\1\26\1\4"+
    "\4\0\1\37\4\4\2\13\1\4\10\13\1\242\2\4"+
    "\6\13\1\4\6\13\2\4\4\0\1\35\4\4\14\42"+
    "\1\4\1\102\4\42\1\243\1\42\1\4\6\42\1\4"+
    "\4\0\1\110\1\141\4\0\13\105\1\244\2\0\6\105"+
    "\1\142\6\105\5\0\1\110\1\141\4\0\14\105\2\0"+
    "\6\105\1\142\4\105\1\245\1\105\1\0\1\4\3\0"+
    "\1\110\1\111\4\4\7\47\1\246\4\47\2\4\6\47"+
    "\1\112\6\47\2\4\3\0\1\110\1\111\4\4\13\47"+
    "\1\247\2\4\6\47\1\112\6\47\1\4\1\21\4\0"+
    "\1\53\4\21\14\56\1\21\1\116\4\56\1\250\1\56"+
    "\1\21\6\56\1\21\4\0\1\123\1\152\4\0\14\121"+
    "\2\0\6\121\1\153\4\121\1\251\1\121\1\0\1\21"+
    "\3\0\1\123\1\124\4\21\13\63\1\252\2\21\6\63"+
    "\1\125\6\63\1\21\1\26\4\0\1\65\4\26\14\71"+
    "\1\26\1\131\4\71\1\253\1\71\1\26\6\71\1\26"+
    "\1\4\4\0\1\35\4\4\11\42\1\254\2\42\1\4"+
    "\1\102\6\42\1\4\6\42\1\4\4\0\1\110\1\141"+
    "\4\0\7\105\1\255\4\105\2\0\6\105\1\142\6\105"+
    "\5\0\1\110\1\141\4\0\13\105\1\256\2\0\6\105"+
    "\1\142\6\105\1\0\1\4\3\0\1\110\1\111\4\4"+
    "\13\47\1\257\2\4\6\47\1\112\6\47\2\4\3\0"+
    "\1\260\1\261\4\4\14\47\2\4\6\47\1\262\6\47"+
    "\1\4\1\21\4\0\1\53\4\21\11\56\1\263\2\56"+
    "\1\21\1\116\6\56\1\21\6\56\1\21\4\0\1\123"+
    "\1\152\4\0\13\121\1\264\2\0\6\121\1\153\6\121"+
    "\1\0\1\21\3\0\1\260\1\265\4\21\14\63\2\21"+
    "\6\63\1\266\6\63\1\21\1\26\4\0\1\65\4\26"+
    "\11\71\1\267\2\71\1\26\1\131\6\71\1\26\6\71"+
    "\1\26\1\4\4\0\1\35\4\4\14\42\1\4\1\102"+
    "\4\42\1\270\1\42\1\4\6\42\1\4\4\0\1\110"+
    "\1\141\4\0\13\105\1\271\2\0\6\105\1\142\6\105"+
    "\5\0\1\260\1\272\4\0\14\105\2\0\6\105\1\273"+
    "\6\105\1\0\1\4\3\0\1\274\1\275\4\4\14\47"+
    "\2\4\6\47\1\276\6\47\1\4\4\0\2\260\30\0"+
    "\1\273\7\0\1\4\3\0\2\260\4\4\1\47\1\4"+
    "\12\47\2\4\6\47\1\262\5\47\3\4\4\0\1\35"+
    "\30\4\1\262\7\4\1\21\4\0\1\53\4\21\14\56"+
    "\1\21\1\116\4\56\1\277\1\56\1\21\6\56\1\21"+
    "\4\0\1\260\1\300\4\0\14\121\2\0\6\121\1\273"+
    "\6\121\1\0\1\21\3\0\2\260\4\21\1\63\1\21"+
    "\12\63\2\21\6\63\1\266\5\63\3\21\4\0\1\53"+
    "\30\21\1\266\7\21\1\26\4\0\1\65\4\26\14\71"+
    "\1\26\1\131\4\71\1\301\1\71\1\26\6\71\1\26"+
    "\1\4\4\0\1\35\4\4\14\42\1\4\1\102\5\42"+
    "\1\302\1\4\6\42\1\4\4\0\1\274\1\303\4\0"+
    "\14\105\2\0\6\105\1\304\6\105\5\0\2\260\4\0"+
    "\1\105\1\0\12\105\2\0\6\105\1\273\5\105\40\0"+
    "\1\273\13\0\2\274\30\0\1\304\7\0\1\4\3\0"+
    "\2\274\4\4\1\47\1\4\12\47\2\4\6\47\1\276"+
    "\5\47\3\4\4\0\1\35\30\4\1\276\7\4\1\21"+
    "\4\0\1\53\4\21\14\56\1\21\1\116\5\56\1\305"+
    "\1\21\6\56\1\21\4\0\2\260\4\0\1\121\1\0"+
    "\12\121\2\0\6\121\1\273\5\121\2\0\1\26\4\0"+
    "\1\65\4\26\14\71\1\26\1\131\5\71\1\306\1\26"+
    "\6\71\1\26\1\4\4\0\1\35\4\4\4\42\1\307"+
    "\7\42\1\4\1\102\6\42\1\4\6\42\1\4\4\0"+
    "\2\274\4\0\1\105\1\0\12\105\2\0\6\105\1\304"+
    "\5\105\40\0\1\304\7\0\1\21\4\0\1\53\4\21"+
    "\4\56\1\310\7\56\1\21\1\116\6\56\1\21\6\56"+
    "\1\21\1\26\4\0\1\65\4\26\4\71\1\311\7\71"+
    "\1\26\1\131\6\71\1\26\6\71\1\26\1\4\4\0"+
    "\1\35\4\4\14\42\1\4\1\102\3\42\1\312\2\42"+
    "\1\4\6\42\1\4\1\21\4\0\1\53\4\21\14\56"+
    "\1\21\1\116\3\56\1\313\2\56\1\21\6\56\1\21"+
    "\1\26\4\0\1\65\4\26\14\71\1\26\1\131\3\71"+
    "\1\314\2\71\1\26\6\71\1\26\1\4\4\0\1\35"+
    "\4\4\14\42\1\4\1\315\6\42\1\4\6\42\1\4"+
    "\1\21\4\0\1\53\4\21\14\56\1\21\1\316\6\56"+
    "\1\21\6\56\1\21\1\26\4\0\1\65\4\26\14\71"+
    "\1\26\1\317\6\71\1\26\6\71\1\26";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7220];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\1\1\11\26\1\1\0\1\1\1\0\5\1"+
    "\2\0\4\1\1\0\1\1\1\0\3\1\2\0\2\1"+
    "\1\0\1\1\1\0\3\1\2\0\102\1\1\0\120\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[207];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  int yyline, yycolumn, yychar;
  private boolean onTagsLine = false;
  private boolean onDocsLine = false;
  private boolean keywordToLeft = false;
  private boolean startLine = true;
  private boolean forceTags = false;

  private IElementType next(IElementType toReturn) {
    startLine = false;
    return toReturn;
  }
  private IElementType newLine() {
    startLine = true;
    keywordToLeft = onTagsLine = forceTags = onDocsLine = false;
    return RobotTypes.NEWLINE_TOKEN;
  }




  RobotScanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  RobotScanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 132) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL.charAt(zzCurrentPosL)) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL.charAt(zzMarkedPosL) == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL.charAt(zzMarkedPosL) == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 14: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [127] { return next(META_INFO_TOKEN); }");
          { return next(META_INFO_TOKEN);
          }
        case 23: break;
        case 11: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [185] { if (startLine) { return next(ROBOT_KEYWORD_DEF_TOKEN); }"+ZZ_NL+"                           if (keywordToLeft) { return next(ROBOT_KEYWORD_ARG_TOKEN); }"+ZZ_NL+"                           keywordToLeft= true; return next(ROBOT_KEYWORD_TOKEN); }");
          { if (startLine) { return next(ROBOT_KEYWORD_DEF_TOKEN); }
                           if (keywordToLeft) { return next(ROBOT_KEYWORD_ARG_TOKEN); }
                           keywordToLeft= true; return next(ROBOT_KEYWORD_TOKEN);
          }
        case 24: break;
        case 8: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [165] { if (startLine) { return next(TEST_CASE_HEADER_TOKEN);  } return next(ROBOT_KEYWORD_ARG_TOKEN); }");
          { if (startLine) { return next(TEST_CASE_HEADER_TOKEN);  } return next(ROBOT_KEYWORD_ARG_TOKEN);
          }
        case 25: break;
        case 10: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [190] { return next(ROBOT_KEYWORD_ARG_TOKEN); }");
          { return next(ROBOT_KEYWORD_ARG_TOKEN);
          }
        case 26: break;
        case 4: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [141] { return next(COLUMN_SEP_TOKEN); }");
          { return next(COLUMN_SEP_TOKEN);
          }
        case 27: break;
        case 22: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [126] { onDocsLine = true; return next(META_INFO_TOKEN); }");
          { onDocsLine = true; return next(META_INFO_TOKEN);
          }
        case 28: break;
        case 13: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [153] { yybegin(YYINITIAL); return next(TABLE_HEADING_TOKEN); }");
          { yybegin(YYINITIAL); return next(TABLE_HEADING_TOKEN);
          }
        case 29: break;
        case 16: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [130] { return next(ASSIGNMENT_TOKEN); }");
          { return next(ASSIGNMENT_TOKEN);
          }
        case 30: break;
        case 6: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [133] { if (onTagsLine || forceTags) { return next(TAG_TOKEN); }"+ZZ_NL+"                          if (onDocsLine) { return next(DOCUMENTATION_TOKEN);}"+ZZ_NL+"                          if (keywordToLeft) { return next(ROBOT_KEYWORD_ARG_TOKEN); }"+ZZ_NL+"                          keywordToLeft = true; return next(ROBOT_KEYWORD_TOKEN); }");
          { if (onTagsLine || forceTags) { return next(TAG_TOKEN); }
                          if (onDocsLine) { return next(DOCUMENTATION_TOKEN);}
                          if (keywordToLeft) { return next(ROBOT_KEYWORD_ARG_TOKEN); }
                          keywordToLeft = true; return next(ROBOT_KEYWORD_TOKEN);
          }
        case 31: break;
        case 21: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [122] { yybegin(TEST_CASES); return next(TEST_CASES_TABLE_HEADING_TOKEN); }");
          { yybegin(TEST_CASES); return next(TEST_CASES_TABLE_HEADING_TOKEN);
          }
        case 32: break;
        case 7: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [137] { return next(NUMBER_LITERAL_TOKEN); }");
          { return next(NUMBER_LITERAL_TOKEN);
          }
        case 33: break;
        case 1: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [138] { if (onTagsLine || forceTags) { return next(TAG_TOKEN); }"+ZZ_NL+"                          if (onDocsLine) { return next(DOCUMENTATION_TOKEN);}"+ZZ_NL+"                            return next(ROBOT_KEYWORD_ARG_TOKEN); }");
          { if (onTagsLine || forceTags) { return next(TAG_TOKEN); }
                          if (onDocsLine) { return next(DOCUMENTATION_TOKEN);}
                            return next(ROBOT_KEYWORD_ARG_TOKEN);
          }
        case 34: break;
        case 18: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [125] { onTagsLine = true; return next(META_INFO_TOKEN); }");
          { onTagsLine = true; return next(META_INFO_TOKEN);
          }
        case 35: break;
        case 5: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [142] { return next(SINGLE_SPACE_TOKEN); }");
          { return next(SINGLE_SPACE_TOKEN);
          }
        case 36: break;
        case 3: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [129] { return next(COMMENT_TOKEN); }");
          { return next(COMMENT_TOKEN);
          }
        case 37: break;
        case 12: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [124] { return next(TABLE_HEADING_TOKEN); }");
          { return next(TABLE_HEADING_TOKEN);
          }
        case 38: break;
        case 20: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [123] { yybegin(KEYWORDS); return next(KEYWORDS_TABLE_HEADING_TOKEN); }");
          { yybegin(KEYWORDS); return next(KEYWORDS_TABLE_HEADING_TOKEN);
          }
        case 39: break;
        case 2: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [121] { return newLine(); }");
          { return newLine();
          }
        case 40: break;
        case 9: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [160] { if (startLine) { return next(TEST_CASE_HEADER_TOKEN); }"+ZZ_NL+"                           if (onTagsLine) { return next(TAG_TOKEN); }"+ZZ_NL+"                           if (onDocsLine) { return next(DOCUMENTATION_TOKEN); }"+ZZ_NL+"                           if (keywordToLeft) { return next(ROBOT_KEYWORD_ARG_TOKEN); }"+ZZ_NL+"                           keywordToLeft= true; return next(ROBOT_KEYWORD_TOKEN); }");
          { if (startLine) { return next(TEST_CASE_HEADER_TOKEN); }
                           if (onTagsLine) { return next(TAG_TOKEN); }
                           if (onDocsLine) { return next(DOCUMENTATION_TOKEN); }
                           if (keywordToLeft) { return next(ROBOT_KEYWORD_ARG_TOKEN); }
                           keywordToLeft= true; return next(ROBOT_KEYWORD_TOKEN);
          }
        case 41: break;
        case 17: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [184] { return ASSIGNMENT_TOKEN; }");
          { return ASSIGNMENT_TOKEN;
          }
        case 42: break;
        case 19: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [132] { forceTags = true; keywordToLeft = true; return next(ROBOT_KEYWORD_TOKEN); }");
          { forceTags = true; keywordToLeft = true; return next(ROBOT_KEYWORD_TOKEN);
          }
        case 43: break;
        case 15: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [131] { return next(VARIABLE_TOKEN); }");
          { return next(VARIABLE_TOKEN);
          }
        case 44: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case KEYWORDS: {
              System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: <<EOF>>");
              System.out.println("action [194] { yybegin(YYINITIAL); }");
              yybegin(YYINITIAL);
            }
            case 208: break;
            case YYINITIAL: {
              System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: <<EOF>>");
              System.out.println("action [144] { return null; }");
              return null;
            }
            case 209: break;
            case TEST_CASES: {
              System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: <<EOF>>");
              System.out.println("action [172] { yybegin(YYINITIAL); }");
              yybegin(YYINITIAL);
            }
            case 210: break;
            default:
            return null;
            }
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java RobotScanner <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        RobotScanner scanner = null;
        try {
          scanner = new RobotScanner( new java.io.FileReader(argv[i]) );
          do {
            System.out.println(scanner.advance());
          } while (!scanner.zzAtEOF);

        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
