
{
  parserClass="com.jivesoftware.robot.intellij.plugin.parser.RobotParser"
  parserUtilClass="com.jivesoftware.robot.intellij.plugin.parser.RobotParserUtil"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Robot"
  psiImplClassSuffix="Impl"
  psiPackage="com.jivesoftware.robot.intellij.plugin.psi"
  psiImplPackage="com.jivesoftware.robot.intellij.plugin.psi.impl"

  elementTypeHolderClass="com.jivesoftware.robot.intellij.plugin.parser.RobotTypes"
  elementTypeClass="com.jivesoftware.robot.intellij.plugin.parser.RobotElementType"
  tokenTypeClass="com.jivesoftware.robot.intellij.plugin.lexer.RobotToken"

  psiImplUtilClass="com.jivesoftware.robot.intellij.plugin.elements.RobotImplUtil"
  implements("KEYWORD")=["com.jivesoftware.robot.intellij.plugin.elements.references.RobotNamedElement"
                         "com.intellij.psi.StubBasedPsiElement<com.jivesoftware.robot.intellij.plugin.elements.stubindex.RobotKeywordStub>"]
  extends("KEYWORD")="com.intellij.extapi.psi.StubBasedPsiElementBase<com.jivesoftware.robot.intellij.plugin.elements.stubindex.RobotKeywordStub>"
  elementTypeClass("KEYWORD")="com.jivesoftware.robot.intellij.plugin.parser.RobotKeywordElementType"

  implements("KEYWORD_TITLE")=["com.jivesoftware.robot.intellij.plugin.elements.references.RobotNamedElement"
                             "com.intellij.psi.StubBasedPsiElement<com.jivesoftware.robot.intellij.plugin.elements.stubindex.RobotKeywordTitleStub>"]
  extends("KEYWORD_TITLE")="com.intellij.extapi.psi.StubBasedPsiElementBase<com.jivesoftware.robot.intellij.plugin.elements.stubindex.RobotKeywordTitleStub>"
  elementTypeClass("KEYWORD_TITLE")="com.jivesoftware.robot.intellij.plugin.parser.RobotKeywordTitleElementType"

  implements("TEST_CASE")="com.jivesoftware.robot.intellij.plugin.elements.references.RobotNamedElement"

  implements("SCALAR_VARIABLE")=["com.jivesoftware.robot.intellij.plugin.elements.references.RobotNamedElement"
                                  "com.intellij.psi.StubBasedPsiElement<com.jivesoftware.robot.intellij.plugin.elements.stubindex.RobotScalarVariableStub>"]
  extends("SCALAR_VARIABLE")="com.intellij.extapi.psi.StubBasedPsiElementBase<com.jivesoftware.robot.intellij.plugin.elements.stubindex.RobotScalarVariableStub>"
  elementTypeClass("SCALAR_VARIABLE")="com.jivesoftware.robot.intellij.plugin.parser.RobotScalarVariableElementType"

  implements("SCALAR_ASSIGNMENT")=["com.jivesoftware.robot.intellij.plugin.elements.references.RobotNamedElement"
                                    "com.intellij.psi.StubBasedPsiElement<com.jivesoftware.robot.intellij.plugin.elements.stubindex.RobotScalarAssignmentStub>"]
  extends("SCALAR_ASSIGNMENT")="com.intellij.extapi.psi.StubBasedPsiElementBase<com.jivesoftware.robot.intellij.plugin.elements.stubindex.RobotScalarAssignmentStub>"
  elementTypeClass("SCALAR_ASSIGNMENT")="com.jivesoftware.robot.intellij.plugin.parser.RobotScalarAssignmentElementType"

  implements("SCALAR_ASSIGNMENT_LHS")="com.jivesoftware.robot.intellij.plugin.elements.references.RobotNamedElement"
  implements("SCALAR_DEFAULT_ARG_VALUE")="com.jivesoftware.robot.intellij.plugin.elements.references.RobotNamedElement"
  implements("ARGUMENT_DEF")="com.jivesoftware.robot.intellij.plugin.elements.references.RobotNamedElement"
  implements("RESOURCE_FILE")="com.jivesoftware.robot.intellij.plugin.elements.references.RobotNamedElement"

}

//Top-level File. A sequence of Robot Tables or empty lines.
robotFile ::= (TABLE | EMPTY_LINE )* END_OF_LINE*

TABLE ::= (SETTINGS_TABLE|VARIABLES_TABLE|TEST_CASES_TABLE|KEYWORDS_TABLE)

/* Settings Table Grammar */
SETTINGS_TABLE ::= SETTINGS_TABLE_HEADING (SETTINGS_LINE EMPTY_LINE | EMPTY_LINE)* (SETTINGS_LINE END_OF_LINE* <<eof>>)? { pin=2 }

SETTINGS_TABLE_HEADING ::= SETTINGS_TABLE_HEADING_TOKEN EMPTY_LINE

SETTINGS_LINE ::= WHITESPACE_TOKEN? SETTING END_OF_LINE* |
                  ELLIPSES_LINE_SETTINGS    END_OF_LINE* {recoverWhile="not_a_newline_token"}

SETTING ::= FORCE_TAGS_SETTING | RESOURCE_SETTING | TEST_SETUP_SETTING | GENERIC_SETTING

private TAG_LIST_OR_ELLIPSES_NO_COL ::= TAG_LIST | ELLIPSES_FOR_SETTINGS_TABLE
FORCE_TAGS_SETTING ::= FORCE_TAGS_SETTING_KEYWORD_TOKEN TAG_LIST_OR_ELLIPSES_NO_COL* { pin = 1 }
SETTING_LIST ::= (COLUMN_SEP_TOKEN  KEYWORD_ARG)+
private SETTING_LIST_OR_ELLIPSES ::= SETTING_LIST | ELLIPSES_FOR_SETTINGS_TABLE
GENERIC_SETTING ::= KEYWORD SETTING_LIST_OR_ELLIPSES* { pin=1 }

TEST_SETUP_TOKEN ::=  (TEST_SETUP_SETTING_TOKEN | TEST_TEARDOWN_SETTING_TOKEN | SUITE_SETUP_SETTING_TOKEN | SUITE_TEARDOWN_SETTING_TOKEN)
TEST_SETUP_SETTING ::= TEST_SETUP_TOKEN ELLIPSES_FOR_SETTINGS_TABLE+ COLUMN_SEP_TOKEN KEYWORD_INVOCATION_SETTINGS |
                       TEST_SETUP_TOKEN COLUMN_SEP_TOKEN KEYWORD_INVOCATION_SETTINGS {pin = 1 }

RESOURCE_FILE ::= ROBOT_FILE_TOKEN { methods=[getReference getReferences getName setName getNameIdentifier handleElementRename getPresentation toString]}
RESOURCE_SETTING ::= RESOURCE_SETTING_TOKEN  ELLIPSES_FOR_SETTINGS_TABLE* COLUMN_SEP_TOKEN  RESOURCE_FILE { pin = 1 }


/* Variables table */
VARIABLES_TABLE ::= VARIABLES_TABLE_HEADING (VARIABLES_LINE EMPTY_LINE | EMPTY_LINE)* (VARIABLES_LINE END_OF_LINE* <<eof>>)? { pin = 2 }

VARIABLES_TABLE_HEADING ::= VARIABLES_TABLE_HEADING_TOKEN EMPTY_LINE

VARIABLES_LINE ::= SCALAR_ASSIGNMENT_LHS (ASSIGNABLE_IN_VARIABLES_TBL)? END_OF_LINE*  |
                   ARRAY_ASSIGNMENT_LHS  (ARRAY_ASSIGNABLE_IN_VARIABLES_TBL)? END_OF_LINE*  |
                   ELLIPSES_LINE_SETTINGS END_OF_LINE* {recoverWhile="not_a_newline_token"}

/* Test cases table */
TEST_CASES_TABLE ::= TEST_CASES_TABLE_HEADING EMPTY_LINE* TEST_CASE* { pin = 3 methods=[getNameIdentifier getPresentation]}

TEST_CASES_TABLE_HEADING ::= TEST_CASES_TABLE_HEADING_TOKEN END_OF_LINE* (NEWLINE_TOKEN | <<eof>>)

TEST_CASE ::= TEST_CASE_HEADER ( TESTCASE_LINE EMPTY_LINE | EMPTY_LINE )* (TESTCASE_LINE END_OF_LINE* <<eof>>)?   { pin = 3 methods=[getName setName getNameIdentifier getPresentation]}

TEST_CASE_HEADER ::= TEST_CASE_HEADER_TOKEN

TEST_SETTING_LINE ::= COLUMN_SEP_TOKEN  TEST_SETTING {pin=2}

TEST_SETTING ::= (DOCUMENTATION_SETTING|TAGS_SETTING|TEST_CASE_SETUP_SETTING|TEST_CASE_TEARDOWN_SETTING|TEST_CASE_TEMPLATE_SETTING|TEST_CASE_TIMEOUT_SETTING)

DOCUMENTATION_SETTING ::= DOCUMENTATION_SETTING_TOKEN  (ELLIPSES_FOR_TEST_TABLE? COLUMN_SEP_TOKEN  DOCUMENTATION_TOKEN)* {pin=1}
private TAG_LIST ::= (COLUMN_SEP_TOKEN TAG)+
private TAG_LIST_OR_ELLIPSES ::= TAG_LIST | ELLIPSES_FOR_TEST_TABLE
TAGS_SETTING ::= TAGS_SETTING_TOKEN TAG_LIST_OR_ELLIPSES* {pin=1}

TEST_CASE_SETUP_SETTING ::= SETUP_SETTING_TOKEN  COLUMN_SEP_TOKEN KEYWORD_INVOCATION_SETTINGS {pin=1}
TEST_CASE_TEARDOWN_SETTING ::= TEARDOWN_SETTING_TOKEN COLUMN_SEP_TOKEN KEYWORD_INVOCATION_SETTINGS {pin=1}
TEST_CASE_TEMPLATE_SETTING ::= TEMPLATE_SETTING_TOKEN COLUMN_SEP_TOKEN KEYWORD {pin=1}
TEST_CASE_TIMEOUT_SETTING ::= TIMEOUT_SETTING_TOKEN COLUMN_SEP_TOKEN TIMEOUT_VALUE_TOKEN {pin=1}

TESTCASE_LINE ::= TEST_SETTING_LINE  END_OF_LINE* |
                  EXECUTION_LINE     END_OF_LINE* |
                  ELLIPSES_LINE_TEST END_OF_LINE* |
                  FOR_LOOP_IN_RANGE  END_OF_LINE* |
                  FOR_LOOP_IN        END_OF_LINE* |
                  KEYWORD_ARG_LIST   END_OF_LINE* |
                  COLUMN_SEP_TOKEN {recoverWhile="not_a_newline_token"}

/* Keywords table */
KEYWORDS_TABLE ::= KEYWORDS_TABLE_HEADING (EMPTY_LINE | KEYWORD_DEFINITION)* { pin=1 methods=[getNameIdentifier getPresentation]}

KEYWORDS_TABLE_HEADING ::= KEYWORDS_TABLE_HEADING_TOKEN END_OF_LINE* NEWLINE_TOKEN

KEYWORD_DEFINITION ::= KEYWORD_DEFINITION_HEADER  (KEYWORD_LINE EMPTY_LINE | EMPTY_LINE )* (KEYWORD_LINE END_OF_LINE* <<eof>>)?  {pin = 1}

KEYWORD_DEFINITION_HEADER ::= KEYWORD_TITLE END_OF_LINE* NEWLINE_TOKEN

KEYWORD_SETTING_LINE ::= COLUMN_SEP_TOKEN KEYWORD_SETTING
KEYWORD_SETTING ::= ARGUMENTS_SETTING | DOCUMENTATION_SETTING | TEST_CASE_TEARDOWN_SETTING | TEST_CASE_TIMEOUT_SETTING

ARGUMENTS_SETTING ::= ARGUMENTS_SETTING_TOKEN (COLUMN_SEP_TOKEN ARGUMENT_DEF)*
SCALAR_DEFAULT_ARG_VALUE ::= SCALAR_DEFAULT_ARG_VALUE_TOKEN {methods = [getName setName getNameIdentifier getReference getReferences handleElementRename toString]}
ARGUMENT_DEF ::= VARIABLE | SCALAR_DEFAULT_ARG_VALUE {methods = [getName setName getNameIdentifier getReference getReferences handleElementRename toString]}

KEYWORD_LINE ::= EXECUTION_LINE        END_OF_LINE* |
                 KEYWORD_SETTING_LINE  END_OF_LINE* |
                 RETURN_LINE           END_OF_LINE* |
                 ELLIPSES_LINE_TEST    END_OF_LINE* |
                 FOR_LOOP_IN_RANGE     END_OF_LINE* |
                 FOR_LOOP_IN           END_OF_LINE* |
                 COLUMN_SEP_TOKEN { recoverWhile="not_a_newline_token" }


RETURN_LINE ::= COLUMN_SEP_TOKEN RETURN_SETTING { pin = 2 }
RETURN_SETTING ::= RETURN_SETTING_TOKEN (COLUMN_SEP_TOKEN KEYWORD_ARG)+ { pin = 1 }


/* Shared grammar */

// For "recoverWhile" statements to consume everything else in a line.
private not_a_newline_token ::= ! NEWLINE_TOKEN

//--------------------Variables and assignment----------------------
SCALAR_VARIABLE ::= VARIABLE_TOKEN { methods=[getReference getReferences getName setName getNameIdentifier handleElementRename toString] }
ARRAY_VARIABLE  ::= ARRAY_VARIABLE_TOKEN
SCALAR_ASSIGNMENT ::= ASSIGNMENT_TOKEN { methods=[getReference getReferences getName setName getNameIdentifier handleElementRename toString]}
ARRAY_ASSIGNMENT ::= ARRAY_ASSIGNMENT_TOKEN
SINGLE_VARIABLE_LIST ::= SCALAR_VARIABLE ((COLUMN_SEP_TOKEN SCALAR_VARIABLE) | INDENTED_ELLIPSES_FOR_TEST_TABLE)+ | SCALAR_VARIABLE //Used for variable list in :FOR loops
VARIABLE ::= SCALAR_VARIABLE | ARRAY_VARIABLE
ASSIGNMENT ::= SCALAR_ASSIGNMENT | ARRAY_ASSIGNMENT

SCALAR_ASSIGNMENT_LHS ::= SCALAR_VARIABLE | SCALAR_ASSIGNMENT { methods=[getName setName getReference getReferences getNameIdentifier handleElementRename toString]}
ARRAY_ASSIGNMENT_LHS  ::= ARRAY_VARIABLE | ARRAY_ASSIGNMENT
SINGLE_ASSIGNMENT_LHS ::= SCALAR_ASSIGNMENT_LHS | ARRAY_ASSIGNMENT_LHS
MULTI_ASSIGNMENT_LHS  ::= VARIABLE (COLUMN_SEP_TOKEN VARIABLE)*  COLUMN_SEP_TOKEN ASSIGNMENT
                       |  VARIABLE (COLUMN_SEP_TOKEN  VARIABLE)+


//--------------------Keyword invocation-----------------------------
//Arguments to a keyword, not including line continuation
KEYWORD_ARG_LIST ::= (COLUMN_SEP_TOKEN KEYWORD_ARG)+
//Invoking a keyword, possibly over multiple lines with ellipses -- for the Test Cases or Keywords tables
KEYWORD_INVOCATION_TEST ::= KEYWORD (KEYWORD_ARG_LIST | ELLIPSES_FOR_TEST_TABLE)* {pin=2}
//Invoking a keyword when indented inside a FOR loop.
INDENTED_KEYWORD_INVOCATION_TEST ::= KEYWORD (KEYWORD_ARG_LIST | INDENTED_ELLIPSES_FOR_TEST_TABLE)+ | KEYWORD
//Invoking a keyword, possibly over multiple lines with ellipses -- for the Settings table and variables table (no column separator at start of each line)
KEYWORD_INVOCATION_SETTINGS ::= KEYWORD (KEYWORD_ARG_LIST | ELLIPSES_FOR_SETTINGS_TABLE)+ | KEYWORD
//In a Variables table, you can assign a variable to a keyword invocation or a literal value
ASSIGNABLE_IN_VARIABLES_TBL ::= COLUMN_SEP_TOKEN KEYWORD_ARG
ARRAY_ASSIGNABLE_IN_VARIABLES_TBL ::= ( KEYWORD_ARG_LIST | ELLIPSES_FOR_SETTINGS_TABLE )*

//Rule for assigning a variable to a keyword invocation.
VARIABLE_ASSIGN_TO_KEYWORD ::= ( MULTI_ASSIGNMENT_LHS | SINGLE_ASSIGNMENT_LHS ) ELLIPSES_FOR_TEST_TABLE* COLUMN_SEP_TOKEN  KEYWORD_INVOCATION_TEST
//Same rule, but any additional lines due to line continuation (...) must be indented, for FOR loops.
INDENTED_VARIABLE_ASSIGN_TO_KEYWORD ::= ( MULTI_ASSIGNMENT_LHS | SINGLE_ASSIGNMENT_LHS ) INDENTED_ELLIPSES_FOR_TEST_TABLE* COLUMN_SEP_TOKEN  INDENTED_KEYWORD_INVOCATION_TEST


// An argument to a keyword can be a variable, a literal, an empty cell (\), or an integer.
// Also allow ROBOT_KEYWORD_TOKEN, for cases where we can't tokenize correctly, like a Templated Test Case that starts with an empty cell.
KEYWORD_ARG ::= VARIABLE | ROBOT_KEYWORD_ARG_TOKEN | EMPTY_CELL_TOKEN | INTEGER_TOKEN | ARRAY_VARIABLE_ACCESS_TOKEN | ROBOT_KEYWORD_TOKEN
// Tags are tokenized specially by being after the [tags] setting or "Force Tags" setting.
TAG ::= TAG_TOKEN

EXECUTION_LINE ::= COLUMN_SEP_TOKEN ( KEYWORD_INVOCATION_TEST | VARIABLE_ASSIGN_TO_KEYWORD ) {pin = 2}

//Junk we can have at the end of any line.
private END_OF_LINE ::= COLUMN_SEP_TOKEN | WHITESPACE_TOKEN | COMMENT_TOKEN
ELLIPSES_LINE_TEST ::= COLUMN_SEP_TOKEN  ELLIPSES  { pin = 2 }

private ELLIPSES_LINE_SETTINGS ::= COLUMN_SEP_TOKEN? WHITESPACE_TOKEN? ELLIPSES
EMPTY_LINE  ::=  END_OF_LINE* NEWLINE_TOKEN { pin = 2 }
ELLIPSES ::= ELLIPSES_TOKEN
private ELLIPSES_FOR_TEST_TABLE    ::= EMPTY_LINE COLUMN_SEP_TOKEN ELLIPSES
private INDENTED_ELLIPSES_FOR_TEST_TABLE  ::= END_OF_LINE* NEWLINE_TOKEN COLUMN_SEP_TOKEN EMPTY_CELL_TOKEN COLUMN_SEP_TOKEN ELLIPSES
private ELLIPSES_FOR_SETTINGS_TABLE ::= EMPTY_LINE WHITESPACE_TOKEN? COLUMN_SEP_TOKEN? ELLIPSES

FOR_VAR_IN_RANGE ::= FOR_LOOP_START_TOKEN  COLUMN_SEP_TOKEN SCALAR_VARIABLE COLUMN_SEP_TOKEN IN_RANGE_TOKEN
SINGLE_BOUND_FOR_LOOP ::= FOR_VAR_IN_RANGE INDENTED_ELLIPSES_FOR_TEST_TABLE* COLUMN_SEP_TOKEN KEYWORD_ARG
DOUBLE_BOUND_FOR_LOOP ::= FOR_VAR_IN_RANGE INDENTED_ELLIPSES_FOR_TEST_TABLE* COLUMN_SEP_TOKEN KEYWORD_ARG
                                           INDENTED_ELLIPSES_FOR_TEST_TABLE* COLUMN_SEP_TOKEN KEYWORD_ARG
DOUBLE_BOUND_FOR_LOOP_WITH_STEP ::= FOR_VAR_IN_RANGE INDENTED_ELLIPSES_FOR_TEST_TABLE* COLUMN_SEP_TOKEN KEYWORD_ARG
                                                     INDENTED_ELLIPSES_FOR_TEST_TABLE* COLUMN_SEP_TOKEN KEYWORD_ARG
                                                     INDENTED_ELLIPSES_FOR_TEST_TABLE* COLUMN_SEP_TOKEN KEYWORD_ARG

FOR_LOOP_IN_RANGE ::= COLUMN_SEP_TOKEN (DOUBLE_BOUND_FOR_LOOP_WITH_STEP | DOUBLE_BOUND_FOR_LOOP | SINGLE_BOUND_FOR_LOOP )
                      END_OF_LINE* FOR_LOOP_EXECUTION_LINE+ {pin=3}

FOR_VAR_IN ::= FOR_LOOP_START_TOKEN  INDENTED_ELLIPSES_FOR_TEST_TABLE* COLUMN_SEP_TOKEN SINGLE_VARIABLE_LIST  COLUMN_SEP_TOKEN  IN_TOKEN
FOR_LOOP_VALUE_LIST ::= (KEYWORD_ARG_LIST | ELLIPSES_FOR_TEST_TABLE)+

FOR_LOOP_IN ::= COLUMN_SEP_TOKEN  FOR_VAR_IN  FOR_LOOP_VALUE_LIST END_OF_LINE* FOR_LOOP_EXECUTION_LINE+ {pin=4}

private FOR_LOOP_EXECUTION_LINE ::= EMPTY_FOR_LOOP_LINE* NON_EMPTY_FOR_LOOP_LINE
private NON_EMPTY_FOR_LOOP_LINE ::= NEWLINE_TOKEN COLUMN_SEP_TOKEN  EMPTY_CELL_TOKEN COLUMN_SEP_TOKEN ( INDENTED_KEYWORD_INVOCATION_TEST | INDENTED_VARIABLE_ASSIGN_TO_KEYWORD ) END_OF_LINE*
private EMPTY_FOR_LOOP_LINE ::=     NEWLINE_TOKEN END_OF_LINE* & NEWLINE_TOKEN

KEYWORD ::= ROBOT_KEYWORD_TOKEN { methods=[getName setName getNameIdentifier getReference getReferences handleElementRename toString]}

KEYWORD_TITLE ::= ROBOT_KEYWORD_TITLE_TOKEN { methods=[getName setName getNameIdentifier getPresentation toString] }

ERROR ::= BAD_SYNTAX_TOKEN


